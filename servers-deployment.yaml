    
Description: >
  Server configuration, Girma Yilma 2019 Udacity DevOps P2
Parameters:
  EnvironmentName:
    Description: EnvironmentName name.
    Type: String
    
  S3Indexhtml:
    Description: Path for index.html
    Type: String
    Default: 's3://udacity-website-girma/index.zip'




Resources:
  SecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load-balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  SecurityGroupWebServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref SecurityGroupLoadBalancer
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - SourceSecurityGroupId: !Ref SecurityGroupBastion
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22

  SecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion server
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Bastion Security Group"

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update -y
          sudo apt install unzip awscli -y
          mkdir html
          aws s3 cp ${S3Indexhtml} html
          unzip -o html/index.zip -d html
          sudo chown -R www-data:www-data html
          apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo apt-key fingerprint 0EBFCD88
          sudo add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          apt-get update
          apt-get -y install docker-ce docker-ce-cli containerd.io
          usermod -aG docker ubuntu
          docker run -dit --name ${EnvironmentName} -p 80:80 -v "$PWD"/html:/usr/local/apache2/htdocs/ httpd:latest
      ImageId: ami-005bdb005fb00e791
      IamInstanceProfile: !Ref ListBucketInstanceProfile
      SecurityGroups: 
      - Ref: SecurityGroupWebServer  
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: "10"
  
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      DesiredCapacity: 4
      MinSize: 2
      MaxSize: 4
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      TargetGroupARNs:
      - Ref: "WebAppTargetGroup"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-2"
      SecurityGroups:
      - Ref: SecurityGroupLoadBalancer

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: "80"
      Protocol: "HTTP"

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: "path-pattern"
        Values: ["/"]
      ListenerArn: !Ref Listener
      Priority: "1"

  BastionPublicSubnet1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t3.small
      SubnetId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-PUB-SN-1"
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: SecurityGroupBastion
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 1

  BastionPublicSubnet2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t3.small
      SubnetId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-PUB-SN-2"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: SecurityGroupBastion
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 2

  ListBucketInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3BucketRole

  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      
  S3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketsPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:List*
          Resource: "*"
      Roles:
      - Ref: S3BucketRole


Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
    Export:
      Name: !Sub "${EnvironmentName}-DNS-NAME"

